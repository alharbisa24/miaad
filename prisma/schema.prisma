// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @map("_id")
  name          String
  email         String   
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  forms     Form[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}


model Form {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  url          String      @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate     DateTime
  endDate       DateTime
  timeStart  String 
  timeEnd    String
  timeDuration  Int         
  applicants    Applicant[]
  slots     FormSlot[]
  createdAt     DateTime    @default(now())
}

model FormSlot {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  timeStart   String
  timeEnd     String
  formId      String     @db.ObjectId
  form        Form       @relation(fields: [formId], references: [id])
  applicant   Applicant?
  applicantId String?    @db.ObjectId
}

model Applicant {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String?
  formId    String      @db.ObjectId
  form      Form        @relation(fields: [formId], references: [id])
  formSlot  FormSlot?   @relation(fields: [formSlotId], references: [id])
  formSlotId String?    @db.ObjectId @unique
  createdAt DateTime    @default(now())
}